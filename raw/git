title = git
columns = 3

[Create]

Clone a repository = $ git clone "<repo>"

Initialize a local repository = $ git init [<project name>]


[Local changes]

Show changed files in your working directory = $ git status

Show ignored files = $ git status --ignored

Show differences not added to index = $ git diff

Show difference between staging area and repo = $$ git diff --staged [file]

Show differences relative to a branch or commit = $ git diff <commit or branch>

# Add
Add changes to next commit = $ git add <file or directory>  $$ use -u to add changes in all tracked files

Remove file(s) from next commit = $ git reset HEAD <file(s)> $$ to undo all $ git reset .

# Remove
Remove a file (from workspace and index) = $ git rm <file(s)>

# Rename
Rename a file (in workspace and index) = $ git mv <file(s)>

Remove files not under version control = $ git clean  $$ use -n for "dry run" and -f to delete the files

Discard uncommitted changes = $ git checkout -- <file(s) | dir>

# Match workspace and index to other tree  $$ default is local tree $$ use to start over on a failed merge  = $ git reset --hard [<remote>/<branch>]


    [[Stash]]

    Save local modifications =  $ git stash [save [<message>]]

    List stashes = $ git stash list

    Remove all stashed states = $ git stash clear

    Discard changes in the stash $$ If no stash is given, the latest is used = $ git stash drop [<stash>]

    Apply changes from stash $$ If no stash is given, the latest is used = $ git stash apply [<stash>]

    Apply changes from last stash state and remove it = $ git stash pop  $$ $ git stash apply & git stash drop

[Local repository]

# History
List commits for current branch = $ git log

# Diff
View changes between two commits = $ git diff <commit> <commit>

# Index
Stop tracking a file = $ git rm --cached <file>

    [[Branch]]

    List branches =  $ git branch  $$ -r for remote and -a for local and remote

    Switch to branch = $ git checkout <branch>

    Create a new branch and switch to it = $ git checkout -b <branch>

    Delete specific branch = $ git branch -d <branch>

    Create a branch that tracks a remote one = $ git branch --track <branch> <remote>/<branch>

    [[Commit]]

    Commit staged changes = $ git commit [-m "<message>"]

    Commit all local changes in tracked files = $ git commit -a [-m "<message>"]

    Modify last commit with current changes in index = $ git commit --amend

    Undo some commits = $ git reset [--soft] HEAD~<X> $$ --soft to leave changes on index

    Discard a some commits from current branch $$ changes are lost = $ git reset --hard HEAD~<X>|<commit>

    Reverse a commit and commit the results = $ git revert <commit>

    Revert all commits since your branch deviated from other and apply them one by by on top of the HEAD of that branch = $ git rebase <branch>

    [[Tags]]

    Mark current commit with a tag =  $ git tag <tag name>

    Mark current commit with an annotated tag =  $ git tag -a <tag name> -m "<tag message>"

    Remove tag = $ git tag --delete <tag name>

    [[Merge]]

    Show differences between staged changes and a commit (default latest) = $ git diff --cached [<commit>]

    Merge branch or commit into current HEAD $$ Use --no-commit to leave changes uncommitted = $ git merge <branch or commit>

    Integrate changes from a specific commit = $ git cherry-pick <commit>

[Remote repository]

Download all changes from remote (but do not integrate them) = $ git fetch [<remote>]

Download changes and merge into HEAD = $ git pull [<remote> [<branch>]] $$ git fetch & git merge FETCH_HEAD

Update server with your commits = $ git push [<remote>/<branch>]

Push new branch to remote with a different name = $ git push <remote> <branch>:<new branch>

Delete remote branch $$ push nothing = $ git push <remote> :<branch>


    [[Tags]]

    Publish all your tags = $ git push --tags

    Publish specific tag = $ git push <remote> <tag name>

    Remove tag from remote = $ git push --delete <remote> <tag name>

[configuration]

Set user name = $ git config [--global|--local] user.name "name"

Set email address = $ git config [--global|--local] user.email "email@domain"

Enable colorization = $ git config [--global|--local] color.ui auto

[footer]
    [[legend]]
        '[argument]' = Optional argument
        <argument> = Fill by user

    [[tools]]
        git-gui = Check your changes before commit
        gitk = Track the history

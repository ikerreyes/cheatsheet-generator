title = BBGLab cheatsheet
columns = 3

[pip]

Install a package in site-packages $$ <package> can be a local directory = $ pip install <package>[==<version>]

Install a package in development mode $$ <package> is installed in the current directory and put that in the path = $ pip install -e <package>

Show information related to a <package> = $ pip show <package>

Upgrade a packet and its dependencies $$ Use --no-deps to only upgrade the <package> = $ pip install <package> --upgrade [--no-deps]

Uninstall <package(s)> = $ pip uninstall <package(s)>

Display all installed packages = $ pip list

Display all installed packages in the format that pip install expects $$ Useful to create the requirements.txt file = $ pip freeze

Install packages using a requirements.txt file $$ Useful to create the requirements.txt file = $ pip install -r requirements.txt

[conda]

Create a new virtual environment with <packages> $$ anaconda ca be used as package = $ conda create --name <environment name> <packages>

Activate an environment = $ source activate <environment name>  $$ Use *root* for no environment

Deactivate and environment $$ Goes to root = $ source deactivate

List all environments  = $ conda env list $$ $ conda info --envs   # TODO

Remove an environment = $ conda remove --name <environment name> --all  $$ $ conda env remove --name <environment name> # TODO

Install a package = $ conda install <package>

Uninstall a package = $ conda remove <package>

Export active environment to a file = $ conda env export > environment.yml

Create environment from file = $ conda env create -f environment.yml

Clone an environment = $ conda create --name <environment name> --clone <original environment>

[Create]

Clone a repository = $ git clone "<repo>"

Initialize a local repository = $ git init [<project name>]


[Local changes]

Show changed files in your working directory = $ git status

# Add
Add changes to next commit = $ git add <file or directory>

# Remove
Remove a file (from workspace and index) = $ git rm <file(s)>

    [[Stash]]

    Save local modifications =  $ git stash [save [<message>]]

    Apply changes from last stash state = $ git stash pop

    Discard changes in the stash $$ If no stash is given, the latest is used = $ git stash drop [<stash>]

[Local repository]

# History
List commits for current branch = $ git log

# Commit
Commit staged changes = $ git commit [-m "<message>"]

Commit all local changes in tracked files = $ git commit -a [-m "<message>"]

# Tags
Mark current commit with a tag =  $ git tag <tag name>

    [[Branch]]

    List all local branches =  $ git branch

    Switch to branch = $ git checkout <branch>

    Create a new branch and switch to it = $ git checkout -b <branch>

    Delete specific branch = $ git branch -d <branch>

    [[Merge]]

    Merge branch or commint into current HEAD $$ Use --no-commit to leave changes uncommitted = $ git merge <branch or commit>



[Remote repository]

Download all changes from remote (but do not integrate them) = $ git fetch <remote>

Download changes and merge into HEAD = $ git pull [<remote> [<branch>]] $$ git fetch & git merge FETCH_HEAD

Update server with your commits = $ git push

Publish your tags = $ git push --tags



[Command line]

Launch new screen = $ screen [-L] $$ Use -L to activate logging

Launch new screen with name = $ screen -S <name>

Reconnect to a screen = '$ screen -r [#] $$ If multiple available use the number (or name) to identify which'

Reconnect to an attached screen = $ screen -D -r <session id>

List screens = $ screen -ls

Exit a screen = $ exit

[Control commands $$ Press CTRL+A and the key indicated]

Help with control commands = CTRL+A -> ?

Detach = CTRL+A -> d

Lock = CTRL+A -> x

New window = CTRL+A -> c

Next window = CTRL+A -> n

Kill = CTRL+A -> k

Alerts = CTRL+A -> M

Logging = CTRL+A -> H
